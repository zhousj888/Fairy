var red = Color(hex: "#ff0000")
var blue = Color(hex: "#3c5a99")
var yellow = Color(hex: "#ffd700")
var white = Color(hex: "#ffffff")
var gray = Color(hex: "#c0c2d0")
var logoBg = Color(hex: "#f5f6f8")
var versionTextColor = Color(hex: "#071139")



class Color {
    var _nativeColor
    func init(hex) {
        _nativeColor = __Native.createColor(hex: hex)
    }

    func toNativeObj() {
        return _nativeColor
    }

}

class ViewContainer: View {

    func init() {
        if _trailing_closure {
            var subviewArr = _trailing_closure()
            var index = 0
            if subviewArr.count {
                repeat {
                    self.addSubview(view: subviewArr[index])
                    index = index + 1
                } while index < subviewArr.count
            }

        }
    }

    func addSubview(view) {
        if view {
            __Native.addArrangedSubview(obj: _nativeView, subview: view)
        }
    }

    func toNativeObj() {
        return _nativeView
    }

}

class VStack: ViewContainer {
    func createNativeView() {
        return __Native.createStack(axis: "ver")
    }
}

class HStack: ViewContainer {
    func createNativeView() {
        return __Native.createStack(axis: "hor")
    }
}

class View {
    var _nativeView
    var _width
    var _height
    var _backgroundColor
    var _radius
    func init(width, height, backgroundColor, radius) {
        _nativeView = self.createNativeView()
        self._width = width
        self._height = height
        self._backgroundColor = backgroundColor
        self._radius = radius
        self.setRadius(radius: radius)
        self.setBackgroundColor(color: backgroundColor)
        self.setSize(width: width, height: height)
        self.setClickListener(clickListener: clickListener)
    }

    func createNativeView() {
        return __Native.createInstance(className: "UIView")
    }

    func setRadius(radius) {
        if radius {
            __Native.setRadius(obj: _nativeView, radius: radius)
        }
        return self
    }

    func setSize(width, height) {
        if width && height {
            __Native.setViewSize(obj: _nativeView, width: width, height: height)
        }
        return self
    }

    func setClickListener(clickListener) {
        if clickListener {
            __Native.setClickListener(obj: _nativeView, sender:self, clickListener: clickListener)
        }
        return self
    }

    func setBackgroundColor(color) {
        if color {
            __Native.setValue(obj: _nativeView, key:"backgroundColor", value: color)
        }
        return self
    }
    func toNativeObj() {
        return _nativeView
    }

}

class Spacer: VStack {}

class ImageView: View {

    func init(src) {
        self.setSrc(src: src)
    }

    func setSrc(src) {
        var image = __Native.createImage(src: src)
        __Native.setValue(obj: _nativeView, key:"image", value:image)
        return self
    }

    func createNativeView() {
        return __Native.createInstance(className: "UIImageView")
    }

}
var TextAlignmentCenter = "TextAlignmentCenter"
var TextAlignmentLeft = "TextAlignmentLeft"
var TextAlignmentRight = "TextAlignmentRight"
class Label: View {

    func init(text, textColor, textAlignment, textSize) {
        self.setText(text: text)
        self.setTextColor(textColor: textColor)
        self.setTextAlignment(textAlignment: textAlignment)
        self.setTextSize(textSize: textSize)
        self.setBold(bold: bold)
    }

    func createNativeView() {
        return __Native.createInstance(className: "UILabel")
    }

    func setBold(bold) {
        if bold {
            __Native.setTextBold(obj: _nativeView, bold: 1)
        }else {
            __Native.setTextBold(obj: _nativeView, bold: 0)
        }
        return self
    }

    func setTextSize(textSize) {
        if textSize {
            __Native.setTextSize(obj: _nativeView, textSize: textSize)
        }
        return self
    }

    func setText(text) {
        if text {
            __Native.setValue(obj: _nativeView, key:"text", value:text)
        }
        return self
    }

    func setTextColor(textColor) {
        if textColor {
            __Native.setValue(obj: _nativeView, key:"textColor", value: textColor)
        }
        return self
    }

    func setTextAlignment(textAlignment) {
        if textAlignment {
            __Native.setTextAlignment(obj: _nativeView, textAlignment: textAlignment)
        }
        return self
    }

}

var colorList = [red, yellow, blue]
var colorIndex = 0
func onClick(sender) {
    sender.setBackgroundColor(color: colorList[colorIndex % 3])
    colorIndex = colorIndex + 1
}

var mainView = VStack() {
    VStack(width: 400, height:200, backgroundColor: logoBg){
        Spacer(width:1,height: 20)
        Label(width: 200, height: 20, text: "About WeTV", textAlignment: TextAlignmentCenter, textColor: versionTextColor, bold:1, textSize: 18)
        Spacer(width:1,height: 50)
        ImageView(width: 186, height: 48, src: "wetv")
        Spacer()
    }
    HStack() {
        Label(width: 200, height: 50, text: "当前版本 3.4.0", textSize: 14, textColor: versionTextColor)
        Spacer()
        Label(width: 100, height: 50, text: "已是最新版本", textAlignment: TextAlignmentRight, textColor: gray, textSize:14)
    }
    Spacer(width: 1, height: 50)

    Label(width: 280, height: 38, text: "从Facebook联系我们", backgroundColor: blue, radius: 4, textColor: white, textAlignment: TextAlignmentCenter, textSize: 14, bold: 1, clickListener: onClick)

    var isVIP = true
    if !isVIP {
        Spacer(width: 1, height: 20)
        Label(width: 280, height: 38, text: "开通VIP！", backgroundColor: yellow, radius: 4, textColor: red, textAlignment: TextAlignmentCenter, textSize: 14, bold: 1, clickListener: onClick)
    }

    Label(width: 200, height: 40, text: "关注我们，给我们发私信", textSize: 13, textColor: gray, textAlignment: TextAlignmentCenter)
    Spacer()
}

mainView
